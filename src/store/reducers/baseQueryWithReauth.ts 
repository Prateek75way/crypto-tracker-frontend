import { fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import type { RootState } from "../store"; // Import RootState as a type
import { setTokens, resetTokens } from "../reducers/authSlice";

export const baseQueryWithReauthHandler = async (args, api, extraOptions) => {
  const baseQuery = fetchBaseQuery({
    baseUrl: "http://localhost:8000/api",
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as RootState).auth.accessToken; // Properly typed getState
      
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      headers.set("Content-Type", "application/json");
      return headers;
    },
    credentials: "include",
  });

  let result = await baseQuery(args, api, extraOptions);

  if (result.error?.status === 500) {
    // Token expired, refresh it
    const refreshResult = await baseQuery(
      {
        url: "/users/refresh",
        method: "POST",
        body: { refreshToken: localStorage.getItem("RefreshToken") },
      },
      api,
      extraOptions
    );
    console.log(refreshResult.data);
     
    if (refreshResult.data) {
      const { accessToken, refreshToken } = refreshResult.data as {
        accessToken: string;
        refreshToken: string;
      };

      // Save the new tokens
      api.dispatch(setTokens({ accessToken, refreshToken, user: null }));
      console.log("Tokens refreshed successfully", accessToken, refreshToken);
      
      localStorage.setItem("AccessToken", accessToken);
      localStorage.setItem("RefreshToken", refreshToken);

      // Retry the original request
      result = await baseQuery(args, api, extraOptions);
    } else {
      // Refresh failed, reset tokens
      api.dispatch(resetTokens());
    }
  }

  return result;
};
